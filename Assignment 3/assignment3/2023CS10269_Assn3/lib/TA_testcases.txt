a)
mat_int 2 2 A := Input();
mat_int 2 2 B := Input();
mat_int C := A +m B;
Print(C);

b)
mat_int A := 2 2 [[4,6],[8,10]];
int C := trace A;
Print(C);

c)
mat_int A := 2 2 [[4,6],[8,10]];
int C := det_m A;
Print(C);

d)
mat_float A := 2 2 [[4.0,6.0],[8.0,10.0]];
if det_m A != 0.0 then {
	mat_float cofactor_matrix := 2 2 [[0.0, 0.0],[0.0, 0.0]];
	for i := 0 to (rows_m A) do {
		for j := 0 to (cols_m A) do {
			cofactor_matrix[i][j] := (-1)^(i+j) * (det_m (minor_m A[i][j]));
		};
	};
	mat_float adjoint_matrix := tr cofactor_matrix;
	mat_float inverse_matrix := (1.0 / (det_m A)) scal_m adjoint_matrix;
	Print(inverse_matrix);
	mat_float inv_direct := inv_m A;
	Print(inv_direct);
} else {
	raise MatrixNotInvertible;
};

e)
mat_float A := 2 2 [[4.0,6.0],[8.0,10.0]];
mat_float B := 2 2 [[1.0,2.0],[3.0,4.0]];
mat_float C := A *m B;
Print(C);

f)
mat_float A := 2 2 [[4.0,6.0],[8.0,10.0]];
mat_float B := 2 [1.0,2.0];
mat_float C := A *mv B;
Print(C);

g)
mat_float A := 2 2 [[4.0,6.0],[8.0,10.0]];
mat_float b := 2 [1.0,2.0];
if det_m A != 0.0 then {
	mat_float Ainverse := inv_m A;
	vec_float x := Ainverse *mv b;
	Print(x);

} else {
	raise MatrixNotInvertible;
};

h)
mat_float A := 2 2 [[4.0,6.0],[8.0,10.0]];
float Atrace := trace A;
float Adet := det_m A;
float D := Atrace * Atrace - 4.0 * Adet;
if D >= 0.0 then {
	float eigenvalue1 := (Atrace + (sqrt D)) / 2.0;
	float eigenvalue2 := (Atrace - (sqrt D)) / 2.0;
	Print(eigenvalue1);
	Print(eigenvalue2);

} else {
	raise ComplexEigenvalues;
};

i)
mat_float A := 5 3 [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0], [10.0, 11.0, 12.0], [13.0, 14.0, 15.0]];
vec_float vector_sum := 5 [0.0, 0.0, 0.0, 0.0, 0.0];
for i := 0 to 3 do {
	for j := 0 to 5 do {
		vector_sum[j] := vector_sum[j] + A[i][j];
	};
};
Print(vector_sum);

j)
float sum_of_squares := 0.0;
mat_float A := 3 3 [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]];
for i := 0 to 3 do {
	for j := 0 to 3 do {
		sum_of_squares := sum_of_squares + A[i][j] * A[i][j];
	};
};
float mag_matrix := sqrt sum_of_squares;
Print(mag_matrix);

k)
mat_float A := 3 3 [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]];
float threshold := 1e-6;
float norm_diff := 50.0;
while norm_diff > threshold do {
	A := A *m A;
	norm_diff := 50.0;
};
Print(A);