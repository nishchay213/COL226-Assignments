a)
A := 2 2 [[4,6],[8,10]];
B := 2 2 [[1,2],[3,4]];
C := A +m B;

b)
A := 2 2 [[4,6],[8,10]];
C := tr A;

c)
A := 2 2 [[4,6],[8,10]];
C := det_m A;

d)
A := 2 2 [[4.0,6.0],[8.0,10.0]];
if det_m A != 0.0 then {
	cofactor_matrix := 2 2 [[0.0, 0.0],[0.0, 0.0]];
	for i := 0 to (rows_m A) - 1 do {
		for j := 0 to (cols_m A) - 1 do {
			cofactor_matrix[i][j] := (-1)^(i+j) * (det_m (minor_m A[i][j]));
		};
	};
	adjoint_matrix := tr cofactor_matrix;
	inverse_matrix := (1.0 / (det_m A)) scal_m adjoint_matrix;
	Print(inverse_matrix);
} else {
	raise MatrixNotInvertible;
};

e)
A := 2 2 [[4.0,6.0],[8.0,10.0]];
B := 2 2 [[1.0,2.0],[3.0,4.0]];
C := A *m B;

f)
A := 2 2 [[4.0,6.0],[8.0,10.0]];
B := 2 [1.0,2.0];
C := A *mv B;

g)
A := 2 2 [[4.0,6.0],[8.0,10.0]];
b := 2 [1.0,2.0];
if det_m A != 0.0 then {
	Ainverse := inv_m A;
	x := Ainverse *mv b;

} else {
	raise MatrixNotInvertible;
};

h)
A := 2 2 [[4.0,6.0],[8.0,10.0]];
Atrace := trace A;
Adet := det_m A;
D := Atrace * Atrace - 4.0 * Adet;
if D >= 0.0 then {
	eigenvalue1 := (Atrace + (sqrt D)) / 2.0;
	eigenvalue2 := (Atrace - (sqrt D)) / 2.0;

} else {
	raise ComplexEigenvalues;
};

i)
A := 5 3 [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0], [10.0, 11.0, 12.0], [13.0, 14.0, 15.0]];
vector_sum := 5 [0.0, 0.0, 0.0, 0.0, 0.0];
for i := 0 to 2 do {
	for j := 0 to 4 do {
		vector_sum[j] := vector_sum[j] + A[i][j];
	};
};
Print(vector_sum);

j)
sum_of_squares := 0.0;
A := 3 3 [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]];
for i := 0 to 2 do {
	for j := 0 to 2 do {
		sum_of_squares := sum_of_squares + A[i][j] * A[i][j];
	};
};
mag_matrix := sqrt sum_of_squares;

k)
A := 3 3 [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]];
threshold := 1e-6;
norm_diff := 50.0;
while norm_diff > threshold do {
	A := A *m A;
	norm_diff := 50.0;
};
